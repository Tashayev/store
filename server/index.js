require('dotenv').config()// 5п. Переменная окружение
const express = require('express')//Require - импортировать файлы. Express - это фреймворк для Node.js,
// который реализовывает слой функций, необходимых для создания эффективных приложений и API.
// Его использование значительно сокращает написание кода, а, значит, уменьшается затрачиваемое на разработку время.
const sequelize = require('./db')//13 п. Импорт sequelize
const models = require('./models/models')//16п. Импорт моделей.
const cors = require('cors') //16п. Это - механизм, использующий дополнительные HTTP-заголовки, чтобы дать возможность
// агенту пользователя получать разрешения на доступ к выбранным ресурсам с сервера на источнике (домене),
// отличном от того, что сайт использует в данный момент.
const fileUpload = require('express-fileupload')
const router = require('./routes/index')//26п.
const errorHandler = require('./middleware/ErrorHandlingMiddleware')//Регистрируем ErrorHandling middleware
const path = require('path')//41п. Путь до папки статик

const PORT = process.env.PORT || 5000//5п. Указываем порт приложения, будим получать из переменного окружения,
// либо по умолчанию порт 5000

const app = express()//5п. Присваиваем express переменную.
app.use(cors())//app.use - используется для монтирования указанной промежуточной функции (это функции,
// которые имеют доступ к объекту запроса и объекту ответа, или мы можем назвать это циклом ответ-запрос) в путь,
// который указывается. Функция промежуточного программного обеспечения выполняется, когда база запрошенного пути
// совпадает с путем.16п.
app.use(express.json())//16п. Для того чтобы приложения мог парсит джейсон формат
//For tasting. 16п.
 /*app.get('/', (req, res)=>{
    res.status(200).json({message: 'working!!!'})
})*/
app.use(express.static(path.resolve(__dirname, 'static'))) //41п. Чтобы получить картинки через сервер
app.use(fileUpload({}))
app.use('/api', router)//23 1 параметр юрл по которому должен

// Обработка ошибок, последний Middleware
app.use(errorHandler)

const start = async () => {// Функция для подключения базы данных. 13п. Все подключения БД являются асинхронными.
    //Если использовать синхронную функ будет ошибка. Это происходит потому что вы не знаете сколько времени займёт
    // загрузка картинки, следовательно, когда вы начнёте выполнять вторую строку кода, сгенерируется ошибка (возможно,
    // периодически, возможно, каждый раз), потому что response ещё не доступен.
    try {//Try catch для отлова потенциальных ошибок.
        await sequelize.authenticate()// С помощи нее будет устанавливаться подключения БД 13п.
        // Await потому что функ асинхронна
        await sequelize.sync()// Функция для сверки состояние БД со схемой БД 13п.
        app.listen(PORT, () => console.log(`Server started on port ${PORT}`))//5п. npm1 параметр. Указываем какой
// порт нужно использовать. 2 параметр. Колл бак функ. При успешной подключении.
    } catch (e) {//Конструкция try...catch пытается выполнить инструкции в блоке try, и, в случае ошибки,
        // выполняет блок catch.
        console.log(e)//13п.
    }
}


start()